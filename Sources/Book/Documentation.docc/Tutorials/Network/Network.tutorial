@Tutorial(time: 30) {
    @Intro(title: "Как замокать сеть в приложении") {
        Для того чтобы создавать превью для любого состояния экрана 100% нужно уметь мокать сеть. Разберем на примере как вы можете добавить замокать сеть в своем приложении
        
<!--        @Image(source: <#file#>, alt: "<#accessible description#>")-->
    }
    
    @Section(title: "Сохраняем ответ от бэкенда") {
        @ContentAndMedia {
            Перед тем как начать стабать ответы от сети нам понадобятся сами стабы. Их легко накопить в процессе: как только вы договорились с командой про контракт или как только вы получили первый ответ от бэкенда сохраните его в коде, если ответ короткий или в виде JSON, если ответ очень большой. 
        }
        
        @Steps {
            @Step {
                Для всех Codable-структур я создаю метод `static func testMake() -> Self` в котором описываю вложенный объект. 
                
                > Tip: Такие функции легко собираются через LLM, достаточно передать контракт, попросить сгенерировать Codable-объект и функцию с примером его создания. 
                
                @Code(name: "TestMake", file: Profile+TestMake.swift)
            }
            
            @Step {
                Вложенные объекты можно собирать из других функций `testMake()`
                
                @Code(name: "TestMake", file: Profile+TestMake+Nested.swift)
            }
            
            @Step {
                Если нужна вариативность объекта, например, мне нужен профиль с разными емейлами, то можно вынести параметр, но поставить ему значение по-умолчанию.
                
                Для вложенных объектов это выглядит не очень красиво, но такое нужно не очень часто. 
                
                @Code(name: "TestMake", file: Profile+TestMake+Nested+Parameters.swift)
            }
            
            @Step {
                Для вложенных объектов это выглядит не очень красиво, но такое нужно не очень часто. 
                
                @Code(name: "TestMake", file: Profile+TestMake+Nested+Parameters+1.swift)
            }
            
            @Step {
                Вы можете создавать и конкретные профили, но главное начинать их все с одинакового слова, тогда просто набрав `.test` автоподстановка покажет возможные варианты, которые заготовил другой разработчик.
                
                > Tip: начинайте все стабы с одного префикса, чтобы вам помогала автоподставнока
                
                Может пугать возможная смена контракта в будущем, но мы именно эту проблему и решаем: если контракт изменится, то обновить его нужно будет только в месте изменения контракта, а все остальные тесты и превью будут использовать нашу функцию в которой все параметры по умолчанию уже имеют значение.
                
                @Code(name: "TestMake", file: Profile+TestMake+Nested+Parameters+Constants.swift)
            }
        }
    }
    
    @Section(title: "Пишем мок для интерфейса сети") {
        @ContentAndMedia {
            <#text#>
            
            @Image(source: <#file#>, alt: "<#accessible description#>")
        }
        
        @Steps {
            @Step {
                <#text#>
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
            
            @Step {
                <#text#>
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
        }
    }
    
    @Section(title: "Мокаем превью") {
        
        @ContentAndMedia {
            Можно даже тесты не писать, а прямо так использовать наш стаб для того. чтобы наполнить вьюшку нужными данными. 
            
            @Image(source: <#file#>, alt: "<#accessible description#>")
        }
        
        @Steps {
            
            @Comment {
                // TODO: Показать как мы будем узнавать о пропущенных моках
            }
            
            @Step {
                Добавим сеть к превьюшке. 
                
                @Code(name: "Preview", file: Preview0.swift)
            }
            
            @Step {
                Теперь сеть можно застабать прямо внутри превью: создаем объект и указываем какой ответ надо подменить
                
                @Code(name: "Preview", file: Preview1.swift)
            }
            
            @Step {
                Если использовать фреймворк Dependency, то можно не передавать объект через конструктор, а заменить его в контексте. Выглядит странно...
                
                @Code(name: "Preview", file: Preview2.swift)
            }
            
            @Step {
                ... но это позволяет перенести стабы прямо в описание превью! Наглядно, что зависимости отделены от самого объекта, в тестах это будет работать точно так же. 
                
                @Code(name: "Preview", file: Preview3.swift)
            }
            
            @Step {
                Увы, для Prefire придется все свернуть обратно в один объект.
                
                @Code(name: "Preview", file: Preview4.swift)
            }
        }
    }
    
    @Section(title: "Мокаем тесты") {
        @ContentAndMedia {
            
            @Image(source: <#file#>, alt: "<#accessible description#>")
        }
        @Steps {
            @Step {
                
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
        }
    }
    
    @Section(title: "Снепшот запросов") {
        @ContentAndMedia {
            Мы написали мощный мок, который можно применять к превью и тестам, чтобы контролировать поведение нашего кода, но можно пойти еще дальше и бесплатно получить проверку всех вызываемых запросов
            
            @Image(source: <#file#>, alt: "<#accessible description#>")
        }
        @Steps {
            @Step {
                Для этого нам понадобится фреймворк `InlineSnapshotTesting`. Допишем вот такенную функцию, которая просто перенаправляет вызов к библиотеке и подменят стратегию тестирования на `.network`.
                
                @Code(name: "Snapshot", file: Snapshot1.swift)
            }
            
            @Step {
                Реализуем эту стратегию. Я тестирую целый сценарий, поэтому мне понадобится просто короткий перечень путей. 
                
                @Code(name: "Snapshot", file: Snapshot2.swift)
            }
            
            @Step {
                Мы остановились вот на таком тесте. 
                
                @Code(name: "Snapshot-Test", file: Result1.swift)
            }

            @Step {
                Теперь достаточно вызвать нашу функцию... 
                
                @Code(name: "Snapshot-Test", file: Snapshot3.swift)
                
            }
            
            @Step {
                ...и история запросов сгенерируется и допишется в файл самостоятельно!
                
                @Code(name: "Snapshot-Test", file: Snapshot4.swift)
                
            }
        }
    }
}
